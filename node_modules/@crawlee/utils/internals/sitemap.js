"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sitemap = void 0;
const tslib_1 = require("tslib");
const node_zlib_1 = require("node:zlib");
const log_1 = tslib_1.__importDefault(require("@apify/log"));
const sax_1 = tslib_1.__importDefault(require("sax"));
class ParsingState {
    constructor() {
        Object.defineProperty(this, "sitemapUrls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "urls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "visitedSitemapUrls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "loc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
    }
    resetContext() {
        this.context = undefined;
        this.loc = false;
    }
}
/**
 * Loads one or more sitemaps from given URLs, following references in sitemap index files, and exposes the contained URLs.
 *
 * **Example usage:**
 * ```javascript
 * // Load a sitemap
 * const sitemap = await Sitemap.load(['https://example.com/sitemap.xml', 'https://example.com/sitemap_2.xml.gz']);
 *
 * // Enqueue all the contained URLs (including those from sub-sitemaps from sitemap indexes)
 * await crawler.addRequests(sitemap.urls);
 * ```
 */
class Sitemap {
    constructor(urls) {
        Object.defineProperty(this, "urls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: urls
        });
    }
    static createParser(parsingState, onEnd, onError) {
        const parser = sax_1.default.createStream(true);
        parser.on('opentag', (node) => {
            if (node.name === 'loc' && parsingState.context !== undefined) {
                parsingState.loc = true;
            }
            if (node.name === 'urlset') {
                parsingState.context = 'urlset';
            }
            if (node.name === 'sitemapindex') {
                parsingState.context = 'sitemapindex';
            }
        });
        parser.on('closetag', (name) => {
            if (name === 'loc') {
                parsingState.loc = false;
            }
        });
        parser.on('text', (text) => {
            if (parsingState.loc) {
                if (parsingState.context === 'sitemapindex') {
                    if (!parsingState.visitedSitemapUrls.includes(text)) {
                        parsingState.sitemapUrls.push(text);
                    }
                }
                if (parsingState.context === 'urlset') {
                    parsingState.urls.push(text);
                }
            }
        });
        parser.on('end', onEnd);
        parser.on('error', onError);
        return parser;
    }
    /**
     * Fetch sitemap content from given URL or URLs and return URLs of referenced pages.
     * @param urls sitemap URL(s)
     * @param proxyUrl URL of a proxy to be used for fetching sitemap contents
     */
    static async load(urls, proxyUrl) {
        const { gotScraping } = await import('got-scraping');
        const parsingState = new ParsingState();
        parsingState.sitemapUrls = Array.isArray(urls) ? urls : [urls];
        while (parsingState.sitemapUrls.length > 0) {
            const sitemapUrl = parsingState.sitemapUrls.pop();
            parsingState.visitedSitemapUrls.push(sitemapUrl);
            parsingState.resetContext();
            try {
                const sitemapStream = await new Promise((resolve, reject) => {
                    const request = gotScraping.stream({ url: sitemapUrl, proxyUrl, method: 'GET' });
                    request.on('response', () => resolve(request));
                    request.on('error', reject);
                });
                if (sitemapStream.response.statusCode === 200) {
                    await new Promise((resolve, reject) => {
                        const parser = Sitemap.createParser(parsingState, () => resolve(undefined), reject);
                        let stream = sitemapStream;
                        if (sitemapUrl.endsWith('.gz')) {
                            stream = stream.pipe((0, node_zlib_1.createGunzip)());
                        }
                        stream.pipe(parser);
                    });
                }
            }
            catch (e) {
                log_1.default.warning(`Malformed sitemap content: ${sitemapUrl}`);
            }
        }
        return new Sitemap(parsingState.urls);
    }
}
exports.Sitemap = Sitemap;
//# sourceMappingURL=sitemap.js.map